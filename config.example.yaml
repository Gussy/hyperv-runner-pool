# GitHub Configuration
github:
  # GitHub App ID (numeric ID from your GitHub App settings)
  # More robust than PAT as tokens are short-lived and auto-refreshed
  app_id: 123456

  # Path to GitHub App private key file (PEM format)
  # Download this from your GitHub App settings
  app_private_key_path: C:\path\to\github-app-private-key.pem

  # GitHub Account name - use EITHER "org" OR "user" (not both)
  # For organizations: use "org"
  org: your-organization
  # For personal accounts: use "user"
  # user: your-github-username
  # The app must be installed on whichever account you specify

  # GitHub Repository name
  # For organizations: Optional. Leave empty for org-level runners, or specify a repo for repo-level runners
  # For personal accounts: REQUIRED. Personal accounts don't support account-level runners
  # Required permissions:
  #   - Organization-level runners: Self-hosted runners (Read & write)
  #   - Repository-level runners: Administration (Read & write)
  repo: your-repository

# Runner Pool Configuration
runners:
  # Number of VMs to maintain in the warm pool
  pool_size: 1

  # Name prefix for VMs and runners
  # VMs will be named as: <name_prefix>1, <name_prefix>2, etc.
  # If not specified, defaults to: "runner-"
  name_prefix: "runner-"

  # Custom labels to add to runners (in addition to default labels)
  # Default labels are: self-hosted, Windows, X64, ephemeral
  # Example: labels: ["gpu", "high-memory"]
  labels: []

  # Runner group (organization/account-level runners only)
  # This setting is ignored for repository-level runners
  # If not specified, runners will be added to the "Default" group
  # Example: runner_group: "my-runner-group"
  runner_group: ""

  # Custom cache server URL (optional)
  # When set, runners will be automatically patched to use your self-hosted cache server
  # instead of GitHub's remote cache. This dramatically speeds up workflows using
  # actions/cache by keeping cache on your local network.
  #
  # Requires: A cache server running on your LAN (e.g., github-actions-cache-server)
  # See: https://gha-cache-server.falcondev.io/getting-started
  #
  # MUST end with a trailing slash (/)
  # Example: "http://192.168.1.100:8080/"
  #
  # The runner will be automatically patched to use this URL instead of GitHub's
  # cache service. This is done by modifying the Runner.Worker.dll binary.
  cache_url: ""

# Health Monitoring Configuration
monitoring:
  # How often to check runner health (in seconds)
  # Default: 30 seconds
  # Increase this to reduce GitHub API calls, decrease for faster failure detection
  # Example: health_check_interval_seconds: 60
  health_check_interval_seconds: 30

  # Maximum time to wait for a VM to boot and register with GitHub (in minutes)
  # If a VM stays in "Creating" state longer than this, it will be recreated
  # Default: 5 minutes
  # Increase this if your VMs take longer to boot
  # Example: creation_timeout_minutes: 10
  creation_timeout_minutes: 5

  # Grace period before checking if runner is registered in GitHub (in minutes)
  # After VM creation, the service waits this long before requiring the runner
  # to appear online in GitHub. This allows time for VM boot and runner registration.
  # Default: 5 minutes
  # Increase this if your VMs take longer to fully start and register
  # Example: grace_period_minutes: 7
  grace_period_minutes: 5

# Hyper-V Configuration
hyperv:
  # Path to the VM template VHDX file
  # If not specified, defaults to: <current-directory>\vms\templates\runner-template.vhdx
  template_path: ""

  # Path to store VM VHDX files
  # If not specified, defaults to: <current-directory>\vms\storage
  storage_path: ""

  # PowerShell Direct credentials for connecting to VMs
  # These should match the user account created in your Packer template
  # This project's Packer templates use:
  #   Username: Administrator
  #   Password: password
  # These are used for headless script injection via PowerShell Direct (Hyper-V feature)
  # If not specified, defaults to Administrator/password
  vm_username: "Administrator"
  vm_password: "password"

  # VM memory in megabytes (MB)
  # This sets the amount of RAM allocated to each VM in the pool
  # Default: 4096 (4 GB)
  # Recommended minimum: 4096 MB for Windows-based GitHub Actions runners
  # Increase this if your workflows require more memory (e.g., 8192 for 8GB)
  # Example: vm_memory_mb: 8192
  vm_memory_mb: 4096

  # VM CPU count (number of virtual processors)
  # This sets the number of vCPUs allocated to each VM in the pool
  # Default: 2
  # Increase this for CPU-intensive workflows (e.g., compilation, testing)
  # Example: vm_cpu_count: 4
  vm_cpu_count: 2

# Logging Configuration
logging:
  # Log level: debug, info, warn, error (default: info)
  level: info

  # Log format: text, json (default: text)
  # Use 'json' for structured logging in production
  format: text

  # Log directory: path where daily log files will be written
  # Log files are named with the current date: YYYY-MM-DD.log (e.g., 2025-10-23.log)
  # If not specified, logs are only written to stdout
  # When running as a service, it's recommended to set this to enable persistent logging
  # Example: directory: "C:\\ProgramData\\hyperv-runner-pool\\logs"
  directory: ""

# Debug Configuration
debug:
  # Use mock VM manager for macOS/Linux development (true/false)
  # Set to true for testing on non-Windows platforms, false for production on Windows
  use_mock: false
